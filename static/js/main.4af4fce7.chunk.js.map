{"version":3,"sources":["Components/CardList.js","Components/Scroll.js","Components/SearchBox.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","Scroll","style","overflowY","height","this","props","children","React","Component","SearchBox","searchChange","className","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","setState","App","searchfield","onSearchChange","bind","fetch","then","response","json","users","event","target","value","filteredRobots","filter","robot","name","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sNAwBeA,EArBE,SAAC,GAAe,EAAbC,OAEZ,MAAM,IAAIC,MAAM,uBCYTC,E,uKAbX,OACI,yBACIC,MAAO,CACHC,UAAW,SACXC,OAAQ,UAEXC,KAAKC,MAAMC,c,GARHC,IAAMC,WCaZC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKC,UAAU,OACX,2BACIA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCeXK,E,kDArBX,WAAYV,GAAO,IAAD,8BACd,gBACKW,MAAQ,CACTC,UAAW,GAHD,E,8DAOAC,EAAOC,GACrBf,KAAKgB,SAAS,CACVH,UAAU,M,+BAKd,OAAGb,KAAKY,MAAMC,SACH,0EAEJb,KAAKC,MAAMC,a,GAlBEC,IAAMC,WCiDnBa,E,kDAzCX,aAAe,IAAD,8BACV,gBACKL,MAAQ,CACTlB,OAAQ,GACRwB,YAAa,IAEjB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBANZ,E,gEASO,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEtB,OAAQ+B,S,qCAGhCC,GACX1B,KAAKgB,SAAS,CAAEE,YAAaQ,EAAMC,OAAOC,U,+BAMpC,IAAD,OACCC,EAAiB7B,KAAKY,MAAMlB,OAAOoC,QAAO,SAAAC,GAC5C,OAAOA,EAAMC,KAAKC,cAAcC,SAAS,EAAKtB,MAAMM,YAAYe,kBAGpE,OACI,yBAAK1B,UAAU,MACX,4CACA,kBAAC,EAAD,CAAWD,aAAcN,KAAKmB,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUzB,OAAQmC,W,GAlCpB1B,IAAMC,WCGJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.4af4fce7.chunk.js","sourcesContent":["import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    if(true)\n        throw new Error('Error has occured!');\n\n        \n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />\n                }\n                )}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nclass Scroll extends React.Component {\n    render(){\n    return (\n        <div\n            style={{\n                overflowY: 'scroll',\n                height: '940px'\n            }}>\n            {this.props.children}\n        </div>\n    );\n    }\n}\n\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends React.Component{\n    constructor(props){\n        super();\n        this.state = {\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({\n            hasError: true\n        })\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Oops, it seems you've encountered an error</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from './../Components/CardList';\nimport Scroll from './../Components/Scroll';\nimport SearchBox from '../Components/SearchBox';\nimport ErrorBoundary from '../Components/ErrorBoundary'\n\n\n\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n        this.onSearchChange = this.onSearchChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }));\n    }\n\n    onSearchChange(event) {\n        this.setState({ searchfield: event.target.value });\n        //console.log(this.state.searchfield)\n    }\n\n\n\n    render() {\n        const filteredRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n        //console.log(filteredRobots);\n        return (\n            <div className='tc'>\n                <h1> RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                    <ErrorBoundary>\n                    <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport {robots} from './Robots'\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}